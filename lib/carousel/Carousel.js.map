{"version":3,"names":[],"mappings":"","sources":["carousel/Carousel.js"],"sourcesContent":["/**\n * @file Carousel\n * @author cgzero(cgzero@cgzero.com)\n * @data 2017-07-17\n */\n\nimport {h, Component} from 'preact';\nimport Gesture from '../util/Gesture';\nimport classNames from 'classnames';\nimport transform from '../util/transform';\nimport CarouselDot from './CarouselDot';\n\nimport {setStyle, query, queryAll, addClass, removeClass} from '../util/dom';\n\n\nexport default class Carousel extends Component {\n\n    static defaultProps = {\n        prefixCls: 'cui',\n        // 卡片百分比宽度\n        cardPercentWidth: 75,\n        // 卡片之间的间距\n        gap: 5,\n        index: 0,\n        scale: 90\n    }\n\n    constructor(props) {\n        super(props);\n        this.arrLength = props.children.length;\n        this.state = {\n            current: props.index\n        };\n        this.list = null;\n        // this.focused = null;\n    }\n\n    componentDidMount() {\n        const {isCard, cardPercentWidth, gap, index, scale}  = this.props;\n\n        // 子元素数量\n        this.arrLength = this.props.children.length;\n\n        transform(this.list);\n\n        if (isCard) {\n\n            // 增加宽度和间距\n            for (let item of this.getAllItems()) {\n                setStyle(item, 'padding', `0 ${gap / 2}px`);\n                setStyle(item, 'width', `${cardPercentWidth}%`);\n            }\n\n            // 居中卡片\n            let paddingLeft = (this.list.clientWidth -  this.getItemWidth()) / 2;\n            setStyle(this.content, 'marginLeft', paddingLeft + 'px');\n\n            // 先将所有卡片缩放到指定大小\n            this.getAllItems().map(item => {\n                setStyle(item, 'transform', `scale(${scale / 100})`);\n            });\n        }\n\n        this.changeIndex(index, false);\n    }\n\n    endAnimation() {\n        // press move 的时候延迟尽量小一点\n        // 但是也不能完全没有，不然释放的一瞬间，手机上会顿挫\n        // TODO 不算特别好的解决方法，需要优化\n        setStyle(this.list, 'transition', '.1s linear');\n    }\n\n    onPressMove(evt) {\n        const current = this.state.current;\n\n        this.endAnimation();\n\n        if ((current === 0 && evt.deltaX > 0) || (current === this.arrLength - 1 && evt.deltaX < 0)) {\n            this.list.translateX += evt.deltaX / 3;\n        }\n        else {\n            this.list.translateX += evt.deltaX;\n        }\n\n        // 如果用户在这个区域上下滚动，则还是需要上下滚动的\n        // 但是uc浏览器在左右滚动时会前进回退页面，所以现在暂时preventDefault\n        // TODO 不算特别好的解决方法，需要优化\n        // if (Math.abs(evt.deltaY / 2) - Math.abs(evt.deltaX) <= 0) {\n        //     evt.preventDefault();\n        // }\n        evt.preventDefault();\n    }\n\n    onSwipe(evt) {\n        const direction = evt.direction;\n        let current = this.state.current;\n\n        switch (direction) {\n            case 'Left':\n                current < this.arrLength - 1 && ++current;\n                break;\n            case 'Right':\n                current > 0 && current--;\n                break;\n        }\n        this.changeIndex(current);\n    }\n\n    getAllItems() {\n        const prefixCls = this.props.prefixCls;\n        return queryAll(`.${prefixCls}-carousel-item`, this.list);\n    }\n\n    getItemWidth() {\n        const prefixCls = this.props.prefixCls;\n        // 优先找item元素宽度，因为有可能是卡片列表，卡片宽度小于列表宽度\n        let dom = query(`.${prefixCls}-carousel-item`, this.list);\n        return dom.clientWidth;\n    }\n\n    changeIndex(current, ease = true) {\n        const {children, scale, isCard, prefixCls} = this.props;\n        ease && setStyle(this.list, 'transition', '.3s ease');\n        this.list.translateX = -current * this.getItemWidth();\n\n        // 缩小其余卡片的大小，恢复当前卡片大小\n        if (isCard) {\n            let carouselItems = this.getAllItems();\n\n            carouselItems.map(item => {\n                removeClass(item, `${prefixCls}-carousel-item-current`);\n                ease && setStyle(item, 'transition', '.3s ease-in-out');\n                setStyle(item, 'transform', `scale(${scale / 100})`);\n\n            });\n            addClass(carouselItems[current], `${prefixCls}-carousel-item-current`);\n            setStyle(carouselItems[current], 'transform', 'scale(1)');\n        }\n\n        this.setState({current});\n        this.props.changeIndex && this.props.changeIndex(current);\n    }\n\n    render() {\n        const {prefixCls, className, children, disableDot, isCard, ...others} = this.props;\n\n        const cls = classNames({\n            [`${prefixCls}-carousel`]: true,\n            'is-card': isCard,\n            [className]: className\n        });\n\n        return (\n            <Gesture\n                onSwipe={this.onSwipe.bind(this)}\n                onPressMove={this.onPressMove.bind(this)}\n            >\n                <div className={cls}>\n                    <div\n                        className={`${prefixCls}-carousel-content`}\n                        ref={dom => this.content = dom}\n                    >\n                        <div ref={dom => this.list = dom} className=\"cui-carousel-list\">\n                            {children}\n                        </div>\n                    </div>\n                    {disableDot ? '' : (\n                        <CarouselDot current={this.state.current} all={this.arrLength} />\n                    )}\n                </div>\n            </Gesture>\n        );\n    }\n}\n"],"file":"Carousel.js"}