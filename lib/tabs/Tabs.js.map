{"version":3,"names":[],"mappings":"","sources":["tabs/Tabs.js"],"sourcesContent":["/**\n * @file Tabs\n * @author BabyLillian<719898036@qq.com>\n * @date 2017-07-09\n */\n\nimport {h, Component, cloneElement} from 'preact';\nimport classNames from 'classnames';\nimport {setStyle, query, queryAll} from '../util/dom';\nimport Tab from './Tab';\n\n\nexport default class Tabs extends Component {\n\n    static defaultProps = {\n        prefixCls: 'cui',\n        selectedIndex: 0,\n        // 类型，目前的值为 blockline 和 txtline， 默认为blockLine\n        type: 'blockline',\n        // 宽度，值为auto(自适应) 和 all（布满整个容器宽度，会被挤压）\n        widthType: 'auto',\n        // 滚动的步长\n        scrollSize: -74,\n        // 切换tab时底边是否有滑动动画\n        hasAnimate: true,\n        onChange() {}\n    };\n\n    static Tab = Tab;\n\n    constructor(props) {\n\n        super(props);\n\n        const selectedIndex = props.selectedIndex;\n\n        /**\n         * 状态\n         *\n         * @private\n         * @type {Object}\n         */\n        this.state = {\n            selectedIndex,\n            hasAnimate: false\n        };\n\n        this.onTabClick = this.onTabClick.bind(this);\n\n        this.doStickTimer = null;\n        this.addAnimateTimer = null;\n    }\n\n    componentDidMount() {\n\n        this.tabSum = queryAll(`.${this.props.prefixCls}-tabs-tab`, this.main).length;\n        this.maxScrollX = this.main.clientWidth - this.nav.clientWidth;\n\n        // 更新底边的状态\n        this.doStick(false, true);\n        // 前置检查是否需要滚动-首次渲染\n        let selectedIndex = this.state.selectedIndex;\n        if (this.props.widthType !== 'all' && selectedIndex > 0 && selectedIndex < this.tabSum) {\n            let nextTab = Math.min(selectedIndex + 1, this.tabSum - 1);\n            let tabs = queryAll(`.${this.props.prefixCls}-tabs-tab`, this.main);\n            let navTab = tabs[nextTab];\n            if (navTab && (navTab.offsetLeft + navTab.clientWidth > this.main.clientWidth)) {\n                this.scrollToElement(tabs[selectedIndex]);\n            }\n        }\n    }\n\n    componentWillReceiveProps({selectedIndex}) {\n\n        if (selectedIndex !== this.state.selectedIndex) {\n            this.setState({\n                selectedIndex\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        // 更新底边的状态,\n        // 因为子组件Tab的渲染顺序在父组件之后，所以需要等待他们ready后再执行位置的更新\n        this.doStickTimer = setTimeout(() => {\n            // 全屏类型的不需要滚动\n            this.doStick(this.props.widthType !== 'all');\n        }, 0);\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.doStickTimer);\n        clearTimeout(this.addAnimateTimer);\n    }\n\n    scrollToElement(el) {\n        if (!el) {\n            return;\n        }\n        let posLeft = (-el.offsetLeft - this.props.scrollSize) || 0;\n        posLeft = posLeft > 0 ? 0 : posLeft < this.maxScrollX ? this.maxScrollX : posLeft;\n\n        setStyle(this.nav, 'WebkitTransform', `translateX(${posLeft}px)`);\n\n    }\n\n    doStick(ifScroll, isFirst) {\n        const sel = `.${this.props.prefixCls}-tabs-tab-active`;\n        let el = query(sel, this.main);\n        this.stickBorder(el, isFirst);\n        if (ifScroll && this.maxScrollX < 0) {\n            this.scrollToElement(el);\n        }\n    }\n\n    stickBorder(target, isFirst) {\n        if (!target) {\n            return;\n        }\n\n        let {clientWidth, offsetLeft} = target;\n\n        if (this.props.type === 'txtline') {\n            let el = query(`.${this.props.prefixCls}-tabs-tab-txt`, target);\n            clientWidth = el.clientWidth;\n            offsetLeft += (target.clientWidth - clientWidth) / 2 || 0;\n        }\n\n        setStyle(this.line, 'display', 'block');\n        setStyle(this.line, 'width', clientWidth + 'px');\n        setStyle(this.line, 'WebkitTransform', `translateX(${offsetLeft}px)`);\n\n        // 在第一次渲染后才加上底边滑动动效类，不然一开始滑到相应tab下会不好看\n        if (isFirst) {\n            setTimeout(() => {\n                this.addAnimateTimer = this.setState({\n                    hasAnimate: this.props.hasAnimate\n                });\n            }, 0);\n        }\n    }\n\n    onTabClick(e, index) {\n\n        if (index === this.state.selectedIndex) {\n            return;\n        }\n\n        let onChange = this.props.onChange;\n\n        this.setState({selectedIndex: index}, () => {\n            onChange && onChange({\n                type: 'change',\n                selectedIndex: index,\n                target: this\n            });\n        });\n    }\n\n\n    render({prefixCls, className, children, type, widthType}) {\n\n        let selectedIndex = this.state.selectedIndex;\n        let percent = '';\n\n        if (widthType === 'all' && children.length > 0) {\n            percent = 1 / children.length * 100 + '%';\n        }\n\n        let tabs = children.map((tab, index) => {\n\n            let selected = selectedIndex === index;\n\n            return cloneElement(\n                tab,\n                {\n                    key: index,\n                    selected: selected,\n                    index: index,\n                    style: {width: percent},\n                    onClick: this.onTabClick\n                }\n            );\n        });\n\n        const cls = classNames({\n            [`${prefixCls}-tabs`]: true,\n            [`${prefixCls}-tabs-blockline`]: type === 'blockline',\n            [`${prefixCls}-tabs-txtline`]: type === 'txtline',\n            [`${prefixCls}-tabs-width-all`]: widthType === 'all',\n            [className]: className\n        });\n\n        const inkBarCls = classNames({\n            [`${prefixCls}-tabs-ink-bar`]: true,\n            [`${prefixCls}-tabs-ink-bar-animated`]: this.state.hasAnimate\n        });\n\n        return (\n            <div className={cls} ref={node => this.main = node}>\n                <div className={`${prefixCls}-tabs-bar`}>\n                    <div className={`${prefixCls}-tabs-nav-container`}>\n                        <div className={`${prefixCls}-tabs-nav-wrap`}>\n                            <div className={`${prefixCls}-tabs-nav-scroll`}>\n                                <div className={`${prefixCls}-tabs-nav`} ref={node => this.nav = node}>\n                                    <div\n                                        className={inkBarCls}\n                                        ref={node => this.line = node}\n                                    ></div>\n                                    {tabs}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n"],"file":"Tabs.js"}