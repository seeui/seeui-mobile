{"version":3,"names":[],"mappings":"","sources":["imageView/ImageView.js"],"sourcesContent":["/**\n * @file ImageView\n * https://github.com/Caesor/react-imageview\n * @author cgzero(cgzero@cgzero.com)\n * @data 2017-07-09\n */\n\nimport {h, Component} from 'preact';\nimport classNames from 'classnames';\nimport Icon from '../icon/Icon';\nimport CenterImage from './CenterImage';\nimport Gesture from '../util/Gesture';\nimport Singleton from '../util/Singleton';\nimport transform from '../util/transform';\nimport {setStyle, getStyle} from '../util/dom';\n\n\n/**\n * 图片间的间距\n *\n * @const\n * @type {number}\n */\nconst MARGIN = 30;\n\nexport default class ImageView extends Component {\n    static defaultProps = {\n        prefixCls: 'cui',\n        gap: MARGIN,\n        current: 0,\n        disablePageNum: false,\n        desc: '',\n        maxScale: 2\n    }\n\n    constructor(props) {\n        super(props);\n        this.arrLength = props.imagelist.length;\n        this.state = {\n            current: props.current\n        };\n        this.initScale = 1;\n        this.screenWidth = window.innerWidth || window.screen.availWidth;\n        this.screenHeight = window.innerHeight || window.screen.availHeight;\n        this.list = null;\n        this.ob = null;\n        this.focused = null;\n    }\n\n    componentDidMount() {\n        const current = this.state.current;\n        const {imagelist, onInit} = this.props;\n\n        this.arrLength = imagelist.length;\n\n        transform(this.list);\n\n        (current || current === 0) && this.changeIndex(current, false);\n        this.bindStyle(current);\n\n        onInit && onInit();\n    }\n\n    onSingleTap() {\n        // 防止点击穿透，设置一点延迟\n        clearTimeout(this.hideTimer)\n        this.hideTimer = setTimeout(() => {\n            this.props.onHide && this.props.onHide();\n        }, 100);\n    }\n\n    onPressMove(evt) {\n        const current = this.state.current;\n\n        setStyle(this.list, 'transition', '.1s linear');\n\n        if (!this.focused) {\n            if ((current === 0 && evt.deltaX > 0) || (current === this.arrLength - 1 && evt.deltaX < 0)) {\n                this.list.translateX += evt.deltaX / 3;\n            }\n            else {\n                this.list.translateX += evt.deltaX;\n            }\n        }\n\n        evt.preventDefault();\n    }\n\n    onSwipe(evt) {\n        const direction = evt.direction;\n        let current = this.state.current;\n\n        if (this.focused) {\n            return false;\n        }\n        switch (direction) {\n            case 'Left':\n                current < this.arrLength - 1 && ++current && this.bindStyle(current);\n                break;\n            case 'Right':\n                current > 0 && current-- && this.bindStyle(current);\n                break;\n        }\n        this.changeIndex(current);\n    }\n\n    onPicPressMove(evt) {\n        const {deltaX, deltaY} = evt;\n        const isLongPic = this.ob.getAttribute('long');\n        const {scaleX, width} = this.ob;\n        this.ob && this.ob.style && setStyle(this.ob, 'transition', '0s linear');\n\n        if (this.ob.scaleX <= 1 || evt.touches.length > 1) {\n            return;\n        }\n\n        if (this.ob && this.checkBoundary(deltaX, deltaY)) {\n            !isLongPic && (this.ob.translateX += deltaX);\n            this.ob.translateY += deltaY;\n\n            if (isLongPic && scaleX * width === this.screenWidth) {\n                this.focused = false;\n            }\n            else {\n                this.focused = true;\n            }\n        }\n        else {\n            this.focused = false;\n        }\n        // console.log('translate ',this.ob.translateX, this.ob.translateY);\n    }\n\n    onLongTap() {\n        this.props.onLongTap && this.props.onLongTap();\n    }\n\n    onDoubleTap(evt) {\n        if (this.props.disableDoubleTap) {\n            return false;\n        }\n\n        const origin = evt.origin;\n        const originX = origin[0] - this.screenWidth / 2 - document.body.scrollLeft;\n        const originY = origin[1] - this.screenHeight / 2 - document.body.scrollTop;\n        const isLongPic = this.ob.getAttribute('long');\n\n        if (this.ob.scaleX === 1) {\n            !isLongPic && (this.ob.translateX = this.ob.originX = originX);\n            !isLongPic && (this.ob.translateY = this.ob.originY = originY);\n            this.setScale(isLongPic ? this.screenWidth / this.ob.width : this.props.maxScale);\n        }\n        else {\n            this.ob.translateX = this.ob.originX;\n            this.ob.translateY = this.ob.originY;\n            this.setScale(1);\n        }\n    }\n\n    bindStyle(current) {\n        this.setState({current}, () => {\n            this.ob && this.restore();\n            this.ob = document.getElementById(`view${current}`);\n            if (this.ob && !this.ob.scaleX) {\n                transform(this.ob);\n            }\n        });\n    }\n\n    changeIndex(current, ease = true) {\n        ease && (this.list.style.webkitTransition = '300ms ease');\n        this.list.translateX = -current * (this.screenWidth + this.props.gap);\n\n        this.props.onChangeIndex && this.props.onChangeIndex(current);\n    }\n\n    setScale(size) {\n        this.ob.style.webkitTransition = '300ms ease-in-out';\n        this.ob.scaleX = this.ob.scaleY = size;\n    }\n\n    restore(rotate = true) {\n        this.ob.translateX = this.ob.translateY = 0;\n        !!rotate && (this.ob.rotateZ = 0);\n        this.ob.scaleX = this.ob.scaleY = 1;\n        this.ob.originX = this.ob.originY = 0;\n    }\n\n    checkBoundary(deltaX = 0, deltaY = 0) {\n        const {scaleX, translateX, translateY, originX, originY, width, height} = this.ob;\n        const rate = this.ob.getAttribute('rate');\n\n        if (scaleX !== 1 || scaleX !== rate) {\n            // include long picture\n            const rangeLeft = (scaleX - 1) * (width / 2 + originX) + originX;\n            const rangeRight = -(scaleX - 1) * (width / 2 - originX) + originX;\n            const rangeUp = (scaleX - 1) * (height / 2 + originY) + originY;\n            const rangeDown = -(scaleX - 1) * (height / 2 - originY) + originY;\n\n            if (translateX + deltaX <= rangeLeft\n                && translateX + deltaX >= rangeRight\n                && translateY + deltaY <= rangeUp\n                && translateY + deltaY >= rangeDown\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    handleDelete() {\n        const onDelete = this.props.onDelete;\n        onDelete && onDelete(this.state.current);\n    }\n\n    render() {\n        const {\n            prefixCls,\n            imagelist,\n            desc,\n            disablePageNum,\n            children,\n            gap,\n            className,\n            showDeleteBtn,\n            ...others\n        } = this.props;\n        const cls = classNames({\n            [`${prefixCls}-imageview`]: true,\n            [className]: className\n        });\n\n        return (\n            <div className={cls}>\n                <Gesture\n                    onSingleTap={this.onSingleTap.bind(this)}\n                    onPressMove={this.onPressMove.bind(this)}\n                    onSwipe={this.onSwipe.bind(this)}>\n                    <ul ref={dom => this.list = dom} className={`${prefixCls}-imageview-list`}>\n                    {\n                        imagelist.map((item, i) => (\n                            <li\n                                className={`${prefixCls}-imageview-item`}\n                                style={{marginRight: gap + 'px'}}\n                                key={'img' + i}\n                            >\n                                <Gesture\n                                    onPressMove={this.onPicPressMove.bind(this)}\n                                    onLongTap={this.onLongTap.bind(this)}\n                                    onDoubleTap={this.onDoubleTap.bind(this)}>\n                                    <CenterImage\n                                        id={`view${i}`}\n                                        className={`${prefixCls}-imageview-img`}\n                                        lazysrc={item}\n                                        index={i}\n                                        current={this.state.current}\n                                    />\n                                </Gesture>\n                            </li>\n                        ))\n                    }\n                    </ul>\n                </Gesture>\n                {disablePageNum ? null : (\n                    <div className={`${prefixCls}-imageview-pager`}>\n                        {this.state.current + 1} / {this.arrLength}\n                    </div>\n                )}\n                {showDeleteBtn ? (\n                    <div\n                        className={`${prefixCls}-imageview-delete`}\n                        onClick={this.handleDelete.bind(this)}\n                    >\n                        <Icon type=\"delete-fill\" />\n                    </div>\n                ) : null}\n                {desc ? <div dangerouslySetInnerHTML={{__html: desc}}></div> : null}\n                {children}\n            </div>\n        );\n    }\n}\n\nexport const SingleImageView = new Singleton(ImageView);\n"],"file":"ImageView.js"}