{"version":3,"names":[],"mappings":"","sources":["util/windowScrollHelper.js"],"sourcesContent":["/**\n * @file windowScrollHelper 开锁屏\n * @author wuqi57(441984145@qq.com)\n * @time 17/6/30\n */\n\nimport {setStyle, getStyle, children} from './dom';\n\nlet originalHTMLBodySize = {};\n\n/**\n * 阻止对应dom元素的scroll样式\n *\n * @param {Element} ele dom元素\n * @return {Element}\n */\nfunction stopWindowScrolling(ele) {\n    let lockNum = ele.getAttribute('data-lock') || '0';\n    let tagName = ele.tagName.toLowerCase();\n\n    lockNum = parseInt(lockNum, 10);\n\n    // 可能存在多个组件的现实与隐藏触发锁屏和解锁，所以累加在一起\n    ele.setAttribute('data-lock', lockNum + 1);\n\n    if (lockNum === 0) {\n        originalHTMLBodySize[tagName] = {\n            width: getStyle(ele, 'width'),\n            height: getStyle(ele, 'height'),\n            overflow: getStyle(ele, 'overflow'),\n            scrollTop: ele.scrollTop\n        };\n        setStyle(ele, 'width', '100%');\n        setStyle(ele, 'height', '100%');\n        setStyle(ele, 'overflow', 'hidden');\n\n        if (tagName === 'body') {\n            ele.scrollTop = 0;\n        }\n    }\n\n    return ele;\n}\n\n/**\n * 取消对应dom元素的scroll样式\n *\n * @param {Element} ele dom元素\n * @return {Element}\n */\nfunction restoreWindowScrolling(ele) {\n    let lockNum = ele.getAttribute('data-lock') || '0';\n    let tagName = ele.tagName.toLowerCase();\n\n    lockNum = parseInt(lockNum, 10);\n\n    if (lockNum > 1) {\n        ele.setAttribute('data-lock', lockNum - 1);\n    }\n    else if (lockNum === 1) {\n        ele.removeAttribute('data-lock');\n\n        const size = originalHTMLBodySize[tagName];\n\n        setStyle(ele, 'width', size.width);\n        setStyle(ele, 'height', size.height);\n        setStyle(ele, 'overflow', size.overflow);\n\n        if (tagName === 'body') {\n            ele.scrollTop = size.scrollTop;\n        }\n\n        delete originalHTMLBodySize[tagName];\n    }\n\n    return ele;\n\n}\n\n/**\n * 设置外层容器的位置\n *\n * @inner\n * @param {Element=} wrapper 页面内容最外层容器，非body\n */\nfunction setWrapperPostion(wrapper) {\n    if (!wrapper) {\n        return;\n    }\n\n    wrapper.scrollTop = originalHTMLBodySize.body.scrollTop;\n}\n\n/**\n * 还原外层容器的位置\n *\n * @inner\n * @param {Element=} wrapper 页面内容最外层容器，非body\n */\nfunction restoreWrapperPostion(wrapper) {\n    if (!wrapper) {\n        return;\n    }\n\n    wrapper.scrollTop = 0;\n}\n\n/**\n * 锁屏\n *\n * @public\n * @param {HTMLElement=} wrapper 所有内容外层容器\n */\nexport function lockWindow(wrapper) {\n    wrapper = wrapper || children(document.body)[0];\n\n    stopWindowScrolling(wrapper);\n\n    let element = wrapper;\n\n    while ((element = element.parentNode) && element !== document) {\n        stopWindowScrolling(element);\n    }\n\n    setWrapperPostion(wrapper);\n}\n\n/**\n * 解锁\n *\n * @public\n * @param {Element=} wrapper 页面内容最外层容器，非body\n */\nexport function unLockWindow(wrapper) {\n    wrapper = wrapper || children(document.body)[0];\n\n    restoreWrapperPostion(wrapper);\n    restoreWindowScrolling(wrapper);\n\n    let element = wrapper;\n\n    while ((element = element.parentNode) && element !== document) {\n        restoreWindowScrolling(element);\n    }\n}\n"],"file":"windowScrollHelper.js"}