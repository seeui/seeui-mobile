{"version":3,"names":[],"mappings":"","sources":["uploader/Uploader.js"],"sourcesContent":["/**\n * @file Input\n * @author cgzero(cgzero@cgzero.com)\n * @data 2017-07-06\n */\n\nimport {h, Component} from 'preact';\nimport {findDOMNode} from 'preact-compat';\nimport classNames from 'classnames';\nimport Icon from '../icon/Icon';\n\n\nexport default class Uploader extends Component {\n\n    static defaultProps = {\n        prefixCls: 'cui',\n        title: '图片上传',\n        maxCount: 9,\n        maxWidth: 500,\n        files: [],\n        onChange: undefined,\n        onError: undefined,\n        lang: {\n            maxError(maxCount) {\n                return `最多只能上传${maxCount}张图片`;\n            }\n        }\n    };\n\n    handleFile(file, cb) {\n        let reader = new FileReader();\n\n        reader.onload = e => {\n            let img = new Image();\n\n            img.onload = () => {\n                let w = Math.min(this.props.maxWidth, img.width);\n                let h = img.height * (w / img.width);\n                let canvas = document.createElement('canvas');\n                let ctx = canvas.getContext('2d');\n\n                // patch subsampling bug\n                // http://jsfiddle.net/gWY2a/24/\n                let drawImage = ctx.drawImage;\n                ctx.drawImage = (drawImg, sx, sy, sw, sh, dx, dy, dw, dh) => {\n                    // Execute several cases (Firefox does not handle undefined as no param)\n                    // by call (apply is bad performance)\n                    if (arguments.length === 9) {\n                        drawImage.call(ctx, drawImg, sx, sy, sw, sh, dx, dy, dw, dh);\n                    }\n                    else if (typeof sw !== 'undefined') {\n                        drawImage.call(ctx, drawImg, sx, sy, sw, sh);\n                    }\n                    else {\n                        drawImage.call(ctx, drawImg, sx, sy);\n                    }\n                };\n\n                canvas.width = w;\n                canvas.height = h;\n                ctx.drawImage(img, 0, 0, w, h);\n\n                let base64 = canvas.toDataURL('image/png');\n\n                cb({\n                    nativeFile: file,\n                    lastModified: file.lastModified,\n                    lastModifiedDate: file.lastModifiedDate,\n                    name: file.name,\n                    size: file.size,\n                    type: file.type,\n                    data: base64\n                }, e);\n            };\n            img.src = e.target.result;\n        };\n        reader.readAsDataURL(file);\n    }\n\n    renderFiles() {\n        return this.props.files.map((file, idx) => {\n            let {url, error, status, onClick, ...others} = file;\n            let fileStyle = {\n                backgroundImage: `url(${url})`\n            };\n            const prefixCls = this.props.prefixCls;\n            let cls = classNames({\n                [`${prefixCls}-uploader-file`]: true,\n                [`${prefixCls}-uploader-file-status`]: error || status\n            });\n\n            let handleFileClick = onClick ? onClick : e => {\n                if (this.props.onFileClick) {\n                    this.props.onFileClick(e, file, idx);\n                }\n            };\n\n            return (\n                <li className={cls} key={idx} style={fileStyle} onClick={handleFileClick} {...others}>\n                    {\n                        error || status ? (\n                            <div className={`${prefixCls}-uploader-file-content`}>\n                                { error ? <Icon type=\"warn-fill\" /> : status }\n                            </div>\n                        ) : false\n                    }\n                </li>\n            );\n        });\n    }\n\n    handleChange(e) {\n        const langs = this.props.lang;\n        let targetFiles = e.target.files;\n\n        if (targetFiles.length === 0) {\n            return;\n        }\n\n        if (this.props.files.length >= this.props.maxCount) {\n            this.props.onError(langs.maxError(this.props.maxCount));\n            return;\n        }\n\n        for (let key of Object.keys(targetFiles)) {\n            let file = targetFiles[key];\n            this.handleFile(file, (handledFile, evt) => {\n                if (this.props.onChange) {\n                    this.props.onChange(handledFile, evt);\n                }\n                findDOMNode(this.uploader).value = '';\n            }, e);\n        }\n    }\n\n    render() {\n        const {prefixCls, title, maxCount, files, onChange, className, ...others} = this.props;\n        const inputProps = Object.assign({}, others);\n        delete inputProps.lang;\n        delete inputProps.onError;\n        delete inputProps.maxWidth;\n\n        const cls = classNames({\n            [`${prefixCls}-uploader`]: true,\n            [className]: className\n        });\n\n        return (\n            <div className={cls}>\n                <div className={`${prefixCls}-uploader-header`}>\n                    <div className={`${prefixCls}-uploader-title`}>{title}</div>\n                    <div className={`${prefixCls}-uploader-info`}>{files.length}/{maxCount}</div>\n                </div>\n                <div className={`${prefixCls}-uploader-body`}>\n                    <ul className={`${prefixCls}-uploader-files`}>\n                        {this.renderFiles()}\n                    </ul>\n                    <div className={`${prefixCls}-uploader-box`}>\n                        <input\n                            ref={dom => this.uploader = dom}\n                            className={`${prefixCls}-uploader-input`}\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={this.handleChange.bind(this)}\n                            {...inputProps}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n"],"file":"Uploader.js"}