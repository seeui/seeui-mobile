{"version":3,"names":[],"mappings":"","sources":["uploader/Uploader.js"],"sourcesContent":["/**\n * @file Input\n * @author cgzero(cgzero@cgzero.com)\n * @data 2017-07-06\n */\n\nimport {h, Component} from 'preact';\nimport {findDOMNode} from 'preact-compat';\nimport classNames from 'classnames';\nimport Icon from '../icon/Icon';\n\n\nexport default class Uploader extends Component {\n\n    static defaultProps = {\n        prefixCls: 'cui',\n        title: '图片上传',\n        maxCount: 9,\n        maxSize: 5 * 1024 * 1024,\n        minSize: 0,\n        maxWidth: 500,\n        files: [],\n        onChange: undefined,\n        onError: undefined,\n        lang: {\n            maxError(maxCount) {\n                return `最多只能上传${maxCount}张图片`;\n            },\n            typeError: '上传文件的格式必须为图片',\n            sizeError(min, max) {\n                if (min && max) {\n                    return `图片大小需大于${min}，小于${max}`;\n                }\n                if (min) {\n                    return `图片大小需不能低于${min}`;\n                }\n                if (max) {\n                    return `图片大小需不能超过${max}`;\n                }\n                return '图片大小有误';\n            }\n        }\n    };\n\n    constructor(props) {\n        super(props);\n        this.lang = {\n            ...Uploader.defaultProps.lang,\n            ...this.props.lang\n        };\n        this.isStop = false;\n    }\n\n    sizeConvert(size) {\n        if (!size) {\n            return null;\n        }\n\n        if (size < 1024) {\n            return size + 'B';\n        }\n        else if (size < 1024 * 1024) {\n            return parseInt(size / 1024, 10) + 'KB';\n        }\n\n        return parseInt(size / 1024 / 1024, 10) + 'MB';\n    }\n\n    stop() {\n        this.isStop = true;\n    }\n\n    handleFile(file, cb) {\n        const {onError, maxSize, minSize, onStart} = this.props;\n\n        // 触发用户传入的 onstart 事件\n        // 如果用户调用 第二个参数stop，则可以实现停止上传，方便用户加一些独有的判断条件\n        this.isStop = false;\n        onStart && onStart(file, this.stop.bind(this));\n        if (this.isStop) {\n            return;\n        }\n\n        // 格式校验\n        if (!/image/.test(file.type)) {\n            onError(this.lang.typeError);\n            return;\n        }\n\n        // 大小校验\n        if (maxSize && file.size > maxSize || minSize && file.size < minSize) {\n            onError(this.lang.sizeError(\n                this.sizeConvert(minSize),\n                this.sizeConvert(maxSize)\n            ));\n            return;\n        }\n\n        let reader = new FileReader();\n\n        reader.onload = e => {\n            let img = new Image();\n\n            img.onload = () => {\n                let w = Math.min(this.props.maxWidth, img.width);\n                let h = img.height * (w / img.width);\n                let canvas = document.createElement('canvas');\n                let ctx = canvas.getContext('2d');\n\n                // patch subsampling bug\n                // http://jsfiddle.net/gWY2a/24/\n                let drawImage = ctx.drawImage;\n                /* eslint-disable */\n                ctx.drawImage = (drawImg, sx, sy, sw, sh, dx, dy, dw, dh) => {\n                /* eslint-enable */\n                    // Execute several cases (Firefox does not handle undefined as no param)\n                    // by call (apply is bad performance)\n                    if (arguments.length === 9) {\n                        drawImage.call(ctx, drawImg, sx, sy, sw, sh, dx, dy, dw, dh);\n                    }\n                    else if (typeof sw !== 'undefined') {\n                        drawImage.call(ctx, drawImg, sx, sy, sw, sh);\n                    }\n                    else {\n                        drawImage.call(ctx, drawImg, sx, sy);\n                    }\n                };\n\n                canvas.width = w;\n                canvas.height = h;\n                ctx.drawImage(img, 0, 0, w, h);\n\n                let base64 = canvas.toDataURL('image/png');\n\n                cb({\n                    nativeFile: file,\n                    lastModified: file.lastModified,\n                    lastModifiedDate: file.lastModifiedDate,\n                    name: file.name,\n                    size: file.size,\n                    type: file.type,\n                    data: base64\n                }, e);\n            };\n            img.src = e.target.result;\n        };\n        reader.readAsDataURL(file);\n    }\n\n    renderFiles() {\n        const {files, prefixCls, onFileClick} = this.props;\n        let currFiles = files || [];\n\n        return currFiles.map((file, idx) => {\n            let {url, error, status, onClick, loading, ...others} = file;\n            let fileStyle = {\n                backgroundImage: `url(${url})`\n            };\n            let cls = classNames({\n                [`${prefixCls}-uploader-file`]: true,\n                [`${prefixCls}-uploader-file-status`]: error || status || loading\n            });\n\n            let handleFileClick = onClick ? onClick : e => {\n                onFileClick && onFileClick(e, file, idx);\n            };\n\n            let content;\n            if (error) {\n                content = <Icon type=\"warn-fill\" />;\n            }\n            else if (loading) {\n                content = <Icon type=\"loading\" />;\n            }\n            else if (status) {\n                content = status;\n            }\n\n            return (\n                /* eslint-disable */\n                <li className={cls} key={idx} style={fileStyle} onClick={handleFileClick} {...others}>\n                    <div className={`${prefixCls}-uploader-file-content`}>\n                        {content}\n                    </div>\n                </li>\n                /* eslint-enable */\n            );\n        });\n    }\n\n    handleChange(e) {\n        const {files, onError, maxCount, onChange} = this.props;\n        let targetFiles = e.target.files;\n        let currFiles = files || [];\n\n        if (targetFiles.length === 0) {\n            return;\n        }\n\n        if (currFiles.length >= maxCount) {\n            onError(this.lang.maxError(maxCount));\n            return;\n        }\n\n        for (let key of Object.keys(targetFiles)) {\n            let file = targetFiles[key];\n            // 部分机器触发有问题，所以这里强制验证下file类型\n            if (!file || !file.size) {\n                continue;\n            }\n            this.handleFile(file, (handledFile, evt) => {\n                if (onChange) {\n                    onChange(handledFile, evt);\n                }\n                /* eslint-disable */\n                findDOMNode(this.uploader).value = '';\n                /* eslint-enable */\n            }, e);\n        }\n    }\n\n    render() {\n        const {prefixCls, title, maxCount, files, onChange, className, ...others} = this.props;\n        const inputProps = Object.assign({}, others);\n        let currFiles = files || [];\n        delete inputProps.lang;\n        delete inputProps.onError;\n        delete inputProps.maxWidth;\n\n        const cls = classNames({\n            [`${prefixCls}-uploader`]: true,\n            [className]: className\n        });\n\n        return (\n            <div className={cls}>\n                <div className={`${prefixCls}-uploader-header`}>\n                    <div className={`${prefixCls}-uploader-title`}>{title}</div>\n                    <div className={`${prefixCls}-uploader-info`}>\n                        {currFiles.length}/{maxCount}\n                    </div>\n                </div>\n                <div className={`${prefixCls}-uploader-body`}>\n                    <ul className={`${prefixCls}-uploader-files`}>\n                        {this.renderFiles()}\n                    </ul>\n                    {currFiles.length < maxCount ? (\n                        <div className={`${prefixCls}-uploader-box`}>\n                            <input\n                                ref={dom => this.uploader = dom}\n                                className={`${prefixCls}-uploader-input`}\n                                type=\"file\"\n                                accept=\"image/*\"\n                                onChange={this.handleChange.bind(this)}\n                                {...inputProps}\n                            />\n                        </div>\n                    ) : null}\n                </div>\n            </div>\n        );\n    }\n}\n"],"file":"Uploader.js"}